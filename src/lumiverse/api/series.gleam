import gleam/dynamic
import gleam/dynamic/decode
import gleam/http
import gleam/http/request
import gleam/int
import gleam/json
import gleam/result

import lustre_http

import lumiverse/layout
import lumiverse/model
import lumiverse/models/filter
import lumiverse/models/series
import lumiverse/models/stream
import router

// this was generated by gemini
// to update metadata, we have to send everything.
pub fn metadata_decoder() {
  use id <- decode.field("id", decode.int)
  use genres <- decode.field("genres", decode.list(tag_decoder()))
  use tags <- decode.field("tags", decode.list(tag_decoder()))
  use summary <- decode.field("summary", decode.string)
  use publication_status <- decode.field(
    "publicationStatus",
    decode.new_primitive_decoder("Publication", dynamic_publication),
  )
  use series_id <- decode.field("seriesId", decode.int)
  use writers <- decode.field("writers", decode.success([]))
  use cover_artists <- decode.field("coverArtists", decode.success([]))
  use publishers <- decode.field("publishers", decode.success([]))
  use characters <- decode.field("characters", decode.success([]))
  use pencillers <- decode.field("pencillers", decode.success([]))
  use inkers <- decode.field("inkers", decode.success([]))
  use imprints <- decode.field("imprints", decode.success([]))
  use colorists <- decode.field("colorists", decode.success([]))
  use letterers <- decode.field("letterers", decode.success([]))
  use editors <- decode.field("editors", decode.success([]))
  use translators <- decode.field("translators", decode.success([]))
  use teams <- decode.field("teams", decode.success([]))
  use locations <- decode.field("locations", decode.success([]))
  use age_rating <- decode.field("ageRating", decode.int)
  use release_year <- decode.field("releaseYear", decode.int)
  use language <- decode.field("language", decode.string)
  use max_count <- decode.field("maxCount", decode.int)
  use total_count <- decode.field("totalCount", decode.int)
  use web_links <- decode.field("webLinks", decode.string)
  use language_locked <- decode.field("languageLocked", decode.bool)
  use summary_locked <- decode.field("summaryLocked", decode.bool)
  use age_rating_locked <- decode.field("ageRatingLocked", decode.bool)
  use publication_status_locked <- decode.field(
    "publicationStatusLocked",
    decode.bool,
  )
  use genres_locked <- decode.field("genresLocked", decode.bool)
  use tags_locked <- decode.field("tagsLocked", decode.bool)
  use writer_locked <- decode.field("writerLocked", decode.bool)
  use character_locked <- decode.field("characterLocked", decode.bool)
  use colorist_locked <- decode.field("coloristLocked", decode.bool)
  use editor_locked <- decode.field("editorLocked", decode.bool)
  use inker_locked <- decode.field("inkerLocked", decode.bool)
  use imprint_locked <- decode.field("imprintLocked", decode.bool)
  use letterer_locked <- decode.field("lettererLocked", decode.bool)
  use penciller_locked <- decode.field("pencillerLocked", decode.bool)
  use publisher_locked <- decode.field("publisherLocked", decode.bool)
  use translator_locked <- decode.field("translatorLocked", decode.bool)
  use team_locked <- decode.field("teamLocked", decode.bool)
  use location_locked <- decode.field("locationLocked", decode.bool)
  use cover_artist_locked <- decode.field("coverArtistLocked", decode.bool)
  use release_year_locked <- decode.field("releaseYearLocked", decode.bool)

  decode.success(series.Metadata(
    id:,
    genres:,
    tags:,
    summary:,
    publication_status:,
    series_id:,
    writers:,
    cover_artists:,
    publishers:,
    characters:,
    pencillers:,
    inkers:,
    imprints:,
    colorists:,
    letterers:,
    editors:,
    translators:,
    teams:,
    locations:,
    age_rating:,
    release_year:,
    language:,
    max_count:,
    total_count:,
    web_links:,
    language_locked:,
    summary_locked:,
    age_rating_locked:,
    publication_status_locked:,
    genres_locked:,
    tags_locked:,
    writer_locked:,
    character_locked:,
    colorist_locked:,
    editor_locked:,
    inker_locked:,
    imprint_locked:,
    letterer_locked:,
    penciller_locked:,
    publisher_locked:,
    translator_locked:,
    team_locked:,
    location_locked:,
    cover_artist_locked:,
    release_year_locked:,
  ))
}

pub fn metadata_to_json(metadata: series.Metadata) -> json.Json {
  json.object([
    #("id", json.int(metadata.id)),
    #("summary", json.string(metadata.summary)),
    #("genres", json.array(metadata.genres, of: tag_encoder)),
    #("tags", json.array(metadata.tags, of: tag_encoder)),
    #("publicationStatus", publication_encoder(metadata.publication_status)),
    #("seriesId", json.int(metadata.series_id)),
    #("writers", json.preprocessed_array([])),
    #("coverArtists", json.preprocessed_array([])),
    #("publishers", json.preprocessed_array([])),
    #("characters", json.preprocessed_array([])),
    #("pencillers", json.preprocessed_array([])),
    #("inkers", json.preprocessed_array([])),
    #("imprints", json.preprocessed_array([])),
    #("colorists", json.preprocessed_array([])),
    #("letterers", json.preprocessed_array([])),
    #("editors", json.preprocessed_array([])),
    #("translators", json.preprocessed_array([])),
    #("teams", json.preprocessed_array([])),
    #("locations", json.preprocessed_array([])),
    #("ageRating", json.int(metadata.age_rating)),
    #("releaseYear", json.int(metadata.release_year)),
    #("language", json.string(metadata.language)),
    #("maxCount", json.int(metadata.max_count)),
    #("totalCount", json.int(metadata.total_count)),
    #("webLinks", json.string(metadata.web_links)),
    #("languageLocked", json.bool(metadata.language_locked)),
    #("summaryLocked", json.bool(metadata.summary_locked)),
    #("ageRatingLocked", json.bool(metadata.age_rating_locked)),
    #("publicationStatusLocked", json.bool(metadata.publication_status_locked)),
    #("genresLocked", json.bool(metadata.genres_locked)),
    #("tagsLocked", json.bool(metadata.tags_locked)),
    #("writerLocked", json.bool(metadata.writer_locked)),
    #("characterLocked", json.bool(metadata.character_locked)),
    #("coloristLocked", json.bool(metadata.colorist_locked)),
    #("editorLocked", json.bool(metadata.editor_locked)),
    #("inkerLocked", json.bool(metadata.inker_locked)),
    #("imprintLocked", json.bool(metadata.imprint_locked)),
    #("lettererLocked", json.bool(metadata.letterer_locked)),
    #("pencillerLocked", json.bool(metadata.penciller_locked)),
    #("publisherLocked", json.bool(metadata.publisher_locked)),
    #("translatorLocked", json.bool(metadata.translator_locked)),
    #("teamLocked", json.bool(metadata.team_locked)),
    #("locationLocked", json.bool(metadata.location_locked)),
    #("coverArtistLocked", json.bool(metadata.cover_artist_locked)),
    #("releaseYearLocked", json.bool(metadata.release_year_locked)),
  ])
}

fn dynamic_publication(
  from: dynamic.Dynamic,
) -> Result(series.Publication, series.Publication) {
  case decode.run(from, decode.int) {
    Ok(num) ->
      case num {
        // https://github.com/Kareadita/Kavita/blob/develop/API/Entities/Enums/PublicationStatus.cs
        0 -> Ok(series.Ongoing)
        1 -> Ok(series.Hiatus)
        2 -> Ok(series.Completed)
        3 -> Ok(series.Cancelled)
        4 -> Ok(series.Ended)
        _ -> Error(series.Ongoing)
        // TODO: replace with unknown
      }
    Error(_) -> Error(series.Ongoing)
    // TODO: replace with invalid
  }
}

fn publication_encoder(pub_status: series.Publication) -> json.Json {
  json.int(case pub_status {
    series.Ongoing -> 0
    series.Hiatus -> 1
    series.Completed -> 2
    series.Cancelled -> 3
    series.Ended -> 4
  })
}

fn tag_decoder() {
  use id <- decode.field("id", decode.int)
  use title <- decode.field("title", decode.string)
  decode.success(series.Tag(id:, title:))
}

fn tag_encoder(t: series.Tag) -> json.Json {
  json.object([#("id", json.int(t.id)), #("title", json.string(t.title))])
}

pub fn recently_added(token: String, order: Int, title: String) {
  let assert Ok(req) =
    request.to(router.direct(
      "/api/series/recently-added-v2?pageNumber=1&pageSize=10",
    ))

  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.object([]) |> json.to_string)
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_json(
      decode.new_primitive_decoder(
        "SeriesList",
        stream.dashboard_series_list_decoder(order, title),
      ),
      layout.DashboardItemRetrieved,
    ),
  )
}

pub fn recently_updated(token: String, order: Int, title: String) {
  let assert Ok(req) =
    request.to(router.direct(
      "/api/series/recently-updated-series?pageNumber=1&pageSize=10",
    ))

  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.object([]) |> json.to_string)
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_json(
      decode.new_primitive_decoder(
        "RecentlyUpdated",
        stream.dashboard_recently_updated_decoder(order, title),
      ),
      layout.DashboardItemRetrieved,
    ),
  )
}

pub fn on_deck(token: String, order: Int, title: String) {
  let assert Ok(req) =
    request.to(router.direct("/api/series/on-deck?pageNumber=1&pageSize=10"))

  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(json.object([]) |> json.to_string)
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_json(
      decode.new_primitive_decoder(
        "SeriesList",
        stream.dashboard_series_list_decoder(order, title),
      ),
      layout.DashboardItemRetrieved,
    ),
  )
}

pub fn decode_smart_filter(
  token: String,
  order: Int,
  smart_filter_encoded: String,
  for_dashboard: Bool,
) {
  let assert Ok(req) = request.to(router.direct("/api/filter/decode"))

  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(
      json.object([#("encodedFilter", json.string(smart_filter_encoded))])
      |> json.to_string,
    )
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_json(
      filter.smart_filter_decoder(for_dashboard, order),
      layout.SmartFilterDecode,
    ),
  )
}

pub fn series(series_id: Int, token: String) {
  let assert Ok(req) =
    request.to(router.direct("/api/series/" <> int.to_string(series_id)))

  let req =
    req
    |> request.set_method(http.Get)
    |> request.set_body(json.object([]) |> json.to_string)
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_json(series.info_decoder(), layout.SeriesRetrieved),
  )
}

pub fn metadata(series_id: Int, token: String) {
  let assert Ok(req) =
    request.to(router.direct(
      "/api/series/metadata?seriesId=" <> int.to_string(series_id),
    ))

  let req =
    req
    |> request.set_method(http.Get)
    |> request.set_body(json.object([]) |> json.to_string)
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_json(metadata_decoder(), layout.SeriesMetadataRetrieved),
  )
}

pub fn update_metadata(metadata: series.Metadata, token: String) {
  let assert Ok(req) = request.to(router.direct("/api/series/metadata"))

  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(
      json.object([#("seriesMetadata", metadata_to_json(metadata))])
      |> json.to_string,
    )
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_anything(fn(res) {
      res |> result.replace(metadata.series_id) |> layout.SeriesMetadataUpdated
    }),
  )
}

pub fn series_details(series_id: Int, token: String) {
  let assert Ok(req) =
    request.to(router.direct(
      "/api/series/series-detail?seriesId=" <> int.to_string(series_id),
    ))

  let req =
    req
    |> request.set_method(http.Get)
    |> request.set_body(json.object([]) |> json.to_string)
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_json(
      decode.new_primitive_decoder("SeriesDetails", fn(val) {
        case decode.run(val, series.details_decoder()) {
          Ok(details) -> {
            Ok(#(series_id, details))
          }
          Error(_) ->
            Error(#(0, series.Details(chapters: [], volumes: [], specials: [])))
        }
      }),
      layout.SeriesDetailsRetrieved,
    ),
  )
}

pub fn all(token: String, smart_filter: filter.SmartFilter) {
  let assert Ok(req) =
    request.to(router.direct("/api/series/all-v2?pageSize=10"))

  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(
      filter.encode_smart_filter(smart_filter) |> json.to_string,
    )
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_json(
      decode.new_primitive_decoder("AllSeries", fn(val) {
        case decode.run(val, decode.list(series.minimal_decoder())) {
          Ok(serieses) ->
            Ok(#(
              smart_filter.for_dashboard,
              model.SeriesList(
                idx: smart_filter.order,
                title: smart_filter.name,
                items: serieses,
              ),
            ))
          Error(_) ->
            Error(#(True, model.SeriesList(idx: 0, title: "", items: [])))
        }
      }),
      layout.AllSeriesRetrieved,
    ),
  )
}

pub fn request_update(srs: series.Info, token: String, user_requested: String) {
  let assert Ok(req) = request.to(router.direct_lumify("/api/update-request"))
  let req =
    req
    |> request.set_method(http.Post)
    |> request.set_body(
      json.object([
        #("name", json.string(srs.name)),
        #("seriesId", json.int(srs.id)),
        #("userThatRequested", json.string(user_requested)),
      ])
      |> json.to_string,
    )
    |> request.set_header("Authorization", "Bearer " <> token)
    |> request.set_header("Accept", "application/json")
    |> request.set_header("Content-Type", "application/json")

  lustre_http.send(
    req,
    lustre_http.expect_anything(layout.SeriesUpdateRequested),
  )
}
